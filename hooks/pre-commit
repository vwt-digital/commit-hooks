#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
git_dir=$(git rev-parse --show-toplevel)
branch_name=$(git branch | grep \* | cut -d ' ' -f2)
exit_code=0

hook_branch=$(cd "$(dirname "$0")"/.. && git rev-parse --abbrev-ref HEAD)

echo "Running pre-commit hook on branch ${branch_name}: "

# Stash unstaged files
echo "Stashing unstaged files..."
stash_name="pre-commit-$(date '+%Y-%m-%d_%Hh%Mm%Ss')"
if ! git stash save --keep-index "$stash_name"; then
  echo "ERROR: Something went wrong while stashing your unstaged changes. Exiting."
  exit 1
fi

##############################################################################
##########                         SAST scan                        ##########
##############################################################################
echo ">>> SAST scan..."

if ! docker run hello-world > /dev/null 2>&1; then
  echo -e "\e[1;31mError: Docker run wasn't executed with sufficient permissions."\
          "See this page: https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user"\
          "for instructions on managing Docker as a non-root user.ðŸ”— '\e[0m"
fi

if [[ $hook_branch == "develop" ]]; then
  echo -e "\e[33mWARNING: you are running a development version of the git hooks! Use the master branch for more" \
   "stable and secure hooks\e[0m"
  docker_image="eu.gcr.io/vwt-d-gew1-dat-cloudbuilders/cloudbuilder-sast"
else
  docker_image="eu.gcr.io/vwt-p-gew1-dat-cloudbuilders/cloudbuilder-sast"
fi

# Create temporary folder to place staged files in
mkdir tmp-pre-commit-folder > /dev/null 2>&1

# Recursively copy files to temporary folder
for file in $(git diff-index --name-only --diff-filter=ACMT --cached HEAD -- ); do
   dir=$(dirname "$file")
  (cd tmp-pre-commit-folder && mkdir -p $dir && cp ../$file $dir)
done
# Copy node_modules
[ -d "$git_dir"/node_modules ] && cp -r "$git_dir"/node_modules tmp-pre-commit-folder
# Copy sast-config
if [[ -d sast-config ]]; then
  cp -r "$git_dir"/sast-config tmp-pre-commit-folder
fi

# Run cloudbuilder-sast on temporary folder
docker run --volume "$git_dir"/tmp-pre-commit-folder:/tmp $docker_image --target /tmp --context pre-commit || exit_code=1

# Remove temporary folder
rm -rf tmp-pre-commit-folder

# Unstash staged files
echo "Unstashing unstaged files..."
git stash pop -q || exit_code=1

if [ "$exit_code" != 0 ] ; then
  echo
  echo "ERROR: SAST scan failed. Your changes were reset."
  echo "in $git_dir/$file:"
  exit 1
fi
