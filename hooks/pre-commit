#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

git_dir=$(git rev-parse --show-toplevel)
branch_name=$(git branch | grep \* | cut -d ' ' -f2)

echo "Running pre-commit hook on ${branch_name} branch:"
##############################################################################
##########                         JSON lint                        ##########
##############################################################################
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(json)$'); do
    python -mjson.tool $file 2> /dev/null
    if [ $? -ne 0 ] ; then
        echo "Lint check of JSON object failed. Your changes were not commited."
        echo "in $git_dir/$file:"
        python -mjson.tool $file
        exit 1
    fi
done
echo "JSON...............................................................DONE"

##############################################################################
##########                        Python lint                       ##########
##############################################################################
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(py)$'); do
    flake8 --max-line-length=139 $file 2> /dev/null
    if [ $? -ne 0 ] ; then
        echo "Lint check of python file failed. Your changes were not commited."
        echo "in $git_dir/$file:"
        exit 1
    fi
done
echo "Flake8.............................................................DONE"

##############################################################################
##########                         Shell lint                       ##########
##############################################################################
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(sh)$'); do
    shellcheck $file 2> /dev/null
    if [ $? -ne 0 ] ; then
        echo "Lint check of bash script failed. Your changes were not commited."
        echo "in $git_dir/$file:"
        exit 1
    fi
done
echo "Shellcheck.........................................................DONE"
