#!/bin/bash

function recover_image() {
  hook_branch=$(cd "$(dirname "$0")"/.. && git rev-parse --abbrev-ref HEAD)
  update_needed=$(cd "$(dirname "$0")"/.. && git remote update && git status -uno)

  if [[ $update_needed == *"Your branch is behind"* ]]; then
    echo -e "\e[31mCommit hooks have been updated! Pull the changes soon.\e[0m"
    sleep 2
  fi

  if [[ $hook_branch == "develop" ]]; then
    echo -e "\e[33mWARNING: you are running a development version of the git hooks! Use the master branch for more" \
      "stable and secure hooks\e[0m"
    docker_image="eu.gcr.io/vwt-d-gew1-dat-cloudbuilders/cloudbuilder-sast"
  else
    docker_image="eu.gcr.io/vwt-p-gew1-dat-cloudbuilders/cloudbuilder-sast"
  fi
}

function move_files() {
  mkdir tmp-pre-commit-folder >/dev/null 2>&1

  OLDIFS=$IFS
  IFS=$'\n'
  json_full_paths=()
  json_git_add_copied_paths=()
  json_git_modified_paths=()
  json_files_check=false
  for file in $(git diff --cached HEAD --name-only --diff-filter=AC); do
    if [[ $file == *.json ]]; then
      json_full_paths+=("$(realpath "$file")")
      json_git_add_copied_paths+=("$file")
      json_files_check=true
    fi
    dir=$(dirname "$file")
    (cd tmp-pre-commit-folder && mkdir -p "$dir" && git --git-dir="${git_dir}/.git" --work-tree="${git_dir}" show ":$file" >> "$file")
  done
  for file in $(git diff --cached HEAD --name-only --diff-filter=M); do
    if [[ $file == *.json ]]; then
      json_full_paths+=("$(realpath "$file")")
      json_git_modified_paths+=("$file")
      json_files_check=true
    fi
    dir=$(dirname "$file")
    (cd tmp-pre-commit-folder && mkdir -p "$dir" && git --git-dir="${git_dir}/.git" --work-tree="${git_dir}" show ":$file" >> "$file")
  done
  IFS=$OLDIFS
}

function validate_new_requirements() {
    files=$(find . -name "requirements.unexpanded.txt" | wc -l)
    if [[ $files -gt 0 ]]; then
              echo -e "\e[33mWARNING: The project you made changes to seems to be using requirements.unexpanded.txt as a" \
         "method to ensure all dependencies are locked. Switch to using requirements.in conform the new guidelines" \
         "specified by DAT-6076 in 0060" \
         "before the 1st of July, 2021\e[0m"
    fi
}

function auto_formatting() {
  for file in $(git diff --cached HEAD --name-only --diff-filter=ACM "*.py"); do
    black ${file}
    isort ${file}
    git add ${file}
  done
}

function validate_cloudbuild_image_usage() {
  manual_function_deployment=0
  manual_scheduler_deployment=0

  for file in $(git diff --cached HEAD --name-only --diff-filter=ACM "*.yaml" "*.json"); do
    if [[ $(grep -i "gcloud functions deploy" ${file}) ]]; then
      manual_function_deployment=1
    fi
    if [[ $(grep -i "gcloud scheduler jobs create" ${file}) ]]; then
      manual_scheduler_deployment=1
    fi
  done

  if [ "$manual_function_deployment" != 0 ]; then
    echo -e "\e[33mWARNING: you are manually deploying a Cloud Function. From the 21st of June, the usage of the" \
      "Cloud Builder Image is required. See https://github.com/vwt-digital/cloudbuilder-function-deploy for more information.\e[0m"
  fi
  if [ "$manual_scheduler_deployment" != 0 ]; then
    echo -e "\e[33mWARNING: you are manually deploying a Cloud Scheduler. From the 21st of June, the usage of the" \
      "Cloud Builder Image is required. See https://github.com/vwt-digital/cloudbuilder-scheduler-deploy for more information.\e[0m"
  fi
}

git_dir=$(git rev-parse --show-toplevel)

recover_image
validate_new_requirements
validate_cloudbuild_image_usage
auto_formatting
move_files

exit_code=0

##############################################################################
##########                         SAST scan                        ##########
##############################################################################

echo ">>> SAST scan..."

if ! docker run hello-world >/dev/null 2>&1; then
  echo -e "\e[1;31mError: Docker run wasn't executed with sufficient permissions." \
    "See this page: https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user" \
    "for instructions on managing Docker as a non-root user.ðŸ”— '\e[0m"
fi

# Copy node_modules
[ -d "$git_dir"/node_modules ] && cp -r "$git_dir"/node_modules tmp-pre-commit-folder
# Copy sast-config
if [[ -d sast-config ]]; then
  cp -r "$git_dir"/sast-config tmp-pre-commit-folder
fi

docker run --volume "$git_dir"/tmp-pre-commit-folder:/sast-files $docker_image --context pre-commit || exit_code=1

rm -rf tmp-pre-commit-folder

if [ "$exit_code" != 0 ]; then
  echo
  echo "ERROR: SAST scan failed. Your changes were reset."
fi

##############################################################################
##########             Schema and Data catalog Validator            ##########
##############################################################################
# Only if there are json files to validate
if [[ $json_files_check == true ]]; then
  python3 -m venv tmp-env
  source tmp-env/bin/activate
  pip install --upgrade pip
  #########################
  # Schema validator
  #########################
  commit_hooks_dir="$(dirname "$0")"
  pip install -r "$commit_hooks_dir"/schema-conform-meta-schema/requirements.txt -q
  echo ">>> Schemavalidator..."
  # Execute recursively on folders
  for f in "${json_full_paths[@]}"; do
    python "$commit_hooks_dir"/schema-conform-meta-schema/schema_against_meta_schema.py --json-file "$f" || exit_code=1
  done
  if [ "$exit_code" != 0 ]; then
    echo
    echo "ERROR: Schema validator failed. Your changes were reset."
  fi
  #########################
  # Data catalog validator
  #########################
  echo ">>> Data catalog validator..."
  pip install jsondiff==1.3.0
  # Check modified files with their old git files
  for f in "${json_git_modified_paths[@]}"; do
    # Get last version of file
    git show HEAD~:"$f" > old_json.json
    python "$commit_hooks_dir"/data_catalog_validator.py --json-file-old "old_json.json" --json-file-new "$(realpath "$f")" || exit_code=1
  done
  if [ -n "$json_git_modified_paths" ]; then
    rm old_json.json
  fi
  # Check added or copied git files
  for f in "${json_git_add_copied_paths[@]}"; do
    python "$commit_hooks_dir"/data_catalog_validator.py --json-file-new "$(realpath "$f")" || exit_code=1
  done
  if [ "$exit_code" != 0 ]; then
    echo
    echo "ERROR: Data catalog validator failed. Your changes were reset."
  fi
  deactivate
  rm -rf tmp-env
fi

exit $exit_code
