#!/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

git_dir=$(git rev-parse --show-toplevel)
branch_name=$(git branch | grep \* | cut -d ' ' -f2)

echo "Running pre-commit hook on ${branch_name} branch:"
##############################################################################
##########                         JSON lint                        ##########
##############################################################################
echo "JSON..."
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(json)$'); do
    python -mjson.tool $file 2> /dev/null 1>&2
    if [ $? -ne 0 ] ; then
        echo
        echo "ERROR: Lint check of JSON object failed. Your changes were not committed."
        echo "in $git_dir/$file:"
        python -mjson.tool $file
        exit 1
    fi
done

##############################################################################
##########                        Python lint                       ##########
##############################################################################
echo "Flake8..."
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(py)$'); do
    flake8 --max-line-length=139 $file 2> /dev/null
    if [ $? -ne 0 ] ; then
        echo
        echo "ERROR: Lint check of python file failed. Your changes were not committed."
        echo "in $git_dir/$file:"
        exit 1
    fi
done

##############################################################################
##########                         Shell lint                       ##########
##############################################################################
echo "Shellcheck..."
for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(sh)$'); do
    shellcheck $file 2> /dev/null
    if [ $? -ne 0 ] ; then
        echo
        echo "ERROR: Lint check of bash script failed. Your changes were not committed."
        echo "in $git_dir/$file:"
        exit 1
    fi
done

##############################################################################
##########                         Bandit check                     ##########
##############################################################################
echo "Bandit..."
bandit_file=$(pwd)/.bandit

if [[ -f "$bandit_file" ]]; then
    bandit_config="${bandit_file}"
else
    unset bandit_config
fi

for file in $(git diff-index --name-only --diff-filter=ACM --cached HEAD -- \
    | grep -E '\.(py)$'); do
    # Add more l's to report only higher severity errors
    if [ -z "${bandit_config}" ]
    then
        bandit -q -l "$file"
    else
        bandit -q -l --ini="${bandit_config}" "$file"
    fi
    if [ $? -ne 0 ] ; then
        echo
        echo "ERROR: Bandit check of python failed. Your changes were not committed."
        echo "in $git_dir/$file:"
        exit 1
    fi
done
